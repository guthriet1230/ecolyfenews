const express = require('express');
const mongoose = require('mongoose')
const cookieSession = require('cookie-session')
const passport = require('passport')
const keys = require('./config/keys')

// import the model before you rerquire the passort. we use models in passport
require('./models/User')
// import the article model
require('./models/Article')
// import the passport authentication code
require('./services/passport')


//connect to mongoDB with our key (this has our username and password to grant us access to the DB)
mongoose.connect(keys.mongoURI)

// call express to create an applciation that will handle our HTTP requests (ie: GET, USE, POST, UPDATE)
const app = express();

// tell express that it needs to make use insid eour application
app.use(cookieSession({
    // i want this cookie to last 30 days before it expires
    maxAge: 30 * 24 * 60 * 60 * 1000,
    keys: [keys.cookieKey]

}))

app.use(passport.initialize());
app.use(passport.session());

// require the authRoutes file, but the authRoutes file is a returned function with an input. That input is our app file generated by express. This makes sure that we can assign the routes from authRoutes correctly to the same 'app' generated in our server.js file
require('./routes/authRoutes')(app)
require('./routes/newArticleRoutes')(app)


// this should only run in production (for this project, Heroku)
if (process.env.NODE_ENV === 'production') {
    // Express will serve up production assets like main.js or main.css file
    // this code reads like "hey browser, use the 'client/build' folder to find the file you're looking for (checking for a specific file)
    app.use(express.static('client/build'))

    // Express will server up the index.html file if it doesnt recognize the route
    // absolute catch all, if we dont have a matching route in the authRoutes file or 'client/build' file, then use the index.html file 
    const path = require('path');
    app.get('*', (req, res) => {
        res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'))
    })
}

// for deployment
// if the process.env (core node module about the environment of the app) has a PORT to listen to (which would be assigned by a site like heroku), then listen to that. if not. the app will listen on localhost:5000
const PORT = process.env.PORT || 5000;
app.listen(PORT)